name: nightwatch tests
on:
  workflow_call: 
    inputs:
      preview_url:
        type: string
        required: true
      publisher:
        type: string
        required: true

jobs:
  tests: 
    name: E2E Tests
    runs-on: ubuntu-latest
    env:
      HURL_host: ${{ inputs.preview_url }}
      HURL_publisher: ${{ inputs.publisher }}
      HURL_api_token: ${{ secrets.SERVICE_SECRET_TOKEN }}
      HURL_sfw_share: ${{ secrets.SFW_SHARE }}
      HURL_nsfw_share: ${{ secrets.NSFW_SHARE }}
      HURL_video_id: 7ec40a0b9aba4307a97e8666822ed563
      HURL_hls_video_id: hls_test_7ec40a0b9aba4307a97e8666822ed563
      ACCESS: ${{ secrets.STORJ_ACCESS_GRANT }}

    environment: Deployment
    steps:
      - uses: actions/checkout@v3

      - name: Add hurl repo
        run: sudo apt-add-repository -y ppa:lepapareil/hurl

      - name: Cache and install hurl
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: hurl jq
          version: 1.0

      - name: Install uplink
        run: |
          curl -L https://github.com/storj/storj/releases/latest/download/uplink_linux_amd64.zip -o uplink_linux_amd64.zip
          unzip -o uplink_linux_amd64.zip
          sudo install uplink /usr/local/bin/uplink

      - name: Run duplication tests
        run: |
          hurl --test test/duplicate.hurl
          hurl --test test/confirm_duplicate.hurl

      - name: Ensure metadata exists
        run: |
          sleep 1s
          uplink meta get --access="$ACCESS" "sj://yral-videos/$HURL_publisher/$HURL_video_id.mp4"
          uplink meta get --access="$ACCESS" "sj://yral-videos/$HURL_publisher/$HURL_video_id.mp4" | jq -e 'select(.test == "value")'

      - name: Setup for move2nsfw tests
        run: |
          uplink rm --access="$ACCESS" "sj://yral-nsfw-videos/$HURL_publisher/$HURL_video_id.mp4"

      - name: Run move2nsfw tests
        run: |
          hurl --test test/move.hurl
          hurl --test test/confirm_move.hurl

      - name: Clean up buckets
        run: |
          uplink rm --access="$ACCESS" "sj://yral-nsfw-videos/$HURL_publisher/$HURL_video_id.mp4"

      # HLS Tests
      - name: Clean up any existing HLS test files
        run: |
          # Clean up SFW bucket
          uplink rm --recursive --access="$ACCESS" "sj://yral-videos/$HURL_hls_video_id/hls/" || true
          # Clean up NSFW bucket
          uplink rm --recursive --access="$ACCESS" "sj://yral-nsfw-videos/${HURL_hls_video_id}_nsfw/hls/" || true

      - name: Run HLS duplication tests
        run: |
          # Update video_id environment variable for HLS tests
          export HURL_video_id=$HURL_hls_video_id
          hurl --test test/duplicate_hls.hurl
          hurl --test test/confirm_duplicate_hls.hurl

      - name: Verify all HLS files were uploaded
        run: |
          # List all files in SFW bucket
          echo "Files in SFW bucket:"
          uplink ls --recursive --access="$ACCESS" "sj://yral-videos/$HURL_hls_video_id/hls/"
          
          # Count files - should have 7 files (1 master + 3 playlists + 3 ts files)
          FILE_COUNT=$(uplink ls --recursive --access="$ACCESS" "sj://yral-videos/$HURL_hls_video_id/hls/" | grep -c "^OBJ")
          if [ "$FILE_COUNT" -ne 7 ]; then
            echo "ERROR: Expected 7 files in SFW bucket, found $FILE_COUNT"
            exit 1
          fi
          
          # Check NSFW bucket has at least master.m3u8
          echo "Files in NSFW bucket:"
          uplink ls --recursive --access="$ACCESS" "sj://yral-nsfw-videos/${HURL_hls_video_id}_nsfw/hls/"

      - name: Clean up HLS test files
        if: always()
        run: |
          # Clean up SFW bucket
          uplink rm --recursive --access="$ACCESS" "sj://yral-videos/$HURL_hls_video_id/hls/" || true
          # Clean up NSFW bucket
          uplink rm --recursive --access="$ACCESS" "sj://yral-nsfw-videos/${HURL_hls_video_id}_nsfw/hls/" || true

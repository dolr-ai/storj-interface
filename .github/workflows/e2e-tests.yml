name: sia e2e tests
on:
  workflow_call: 
    inputs:
      preview_url:
        type: string
        required: true
      publisher:
        type: string
        required: true

jobs:
  tests: 
    name: E2E Tests with Sia
    runs-on: ubuntu-latest
    env:
      HURL_host: ${{ inputs.preview_url }}
      HURL_publisher: ${{ inputs.publisher }}
      HURL_api_token: ${{ secrets.SERVICE_SECRET_TOKEN }}
      HURL_video_id: 7ec40a0b9aba4307a97e8666822ed563
      RENTERD_BASE_URL: ${{ secrets.RENTERD_BASE_URL }}
      SFW_WALLETD_BASE_URL: ${{ secrets.SFW_WALLETD_BASE_URL }}
      NSFW_WALLETD_BASE_URL: ${{ secrets.NSFW_WALLETD_BASE_URL }}
      RENTERD_API_PASSWORD: ${{ secrets.RENTERD_API_PASSWORD }}
      SFW_WALLETD_API_PASSWORD: ${{ secrets.SFW_WALLETD_API_PASSWORD }}
      NSFW_WALLETD_API_PASSWORD: ${{ secrets.NSFW_WALLETD_API_PASSWORD }}

    environment: Deployment
    services:
      # Start test Sia services for E2E testing
      renterd:
        image: ghcr.io/siafoundation/renterd:latest
        env:
          RENTERD_API_PASSWORD: test_password_123
        ports:
          - 9980:9980
        options: >-
          --health-cmd "curl -f http://localhost:9980/api/autopilot/config -H 'Authorization: Basic $(echo -n :test_password_123 | base64)' || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

      walletd-sfw:
        image: ghcr.io/siafoundation/walletd:latest
        env:
          WALLETD_API_PASSWORD: test_sfw_password_123
        ports:
          - 9983:9980
        options: >-
          --health-cmd "curl -f http://localhost:9980/api/consensus/network -H 'Authorization: Basic $(echo -n :test_sfw_password_123 | base64)' || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

      walletd-nsfw:
        image: ghcr.io/siafoundation/walletd:latest
        env:
          WALLETD_API_PASSWORD: test_nsfw_password_123
        ports:
          - 9984:9980
        options: >-
          --health-cmd "curl -f http://localhost:9980/api/consensus/network -H 'Authorization: Basic $(echo -n :test_nsfw_password_123 | base64)' || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Add hurl repo
        run: sudo apt-add-repository -y ppa:lepapareil/hurl

      - name: Cache and install hurl
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: hurl jq curl
          version: 1.0

      - name: Wait for Sia services to be ready
        run: |
          echo "Waiting for renterd to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:9980/api/autopilot/config -H "Authorization: Basic $(echo -n :test_password_123 | base64)"; do sleep 5; done'
          
          echo "Waiting for SFW walletd to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:9983/api/consensus/network -H "Authorization: Basic $(echo -n :test_sfw_password_123 | base64)"; do sleep 5; done'
          
          echo "Waiting for NSFW walletd to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:9984/api/consensus/network -H "Authorization: Basic $(echo -n :test_nsfw_password_123 | base64)"; do sleep 5; done'

      - name: Create test buckets
        run: |
          # Create SFW bucket
          curl -X POST http://localhost:9980/bus/buckets \
            -H "Authorization: Basic $(echo -n :test_password_123 | base64)" \
            -H "Content-Type: application/json" \
            -d '{"name": "yral-videos"}'
          
          # Create NSFW bucket
          curl -X POST http://localhost:9980/bus/buckets \
            -H "Authorization: Basic $(echo -n :test_password_123 | base64)" \
            -H "Content-Type: application/json" \
            -d '{"name": "yral-nsfw-videos"}'

      - name: Run duplication tests
        run: |
          hurl --test test/duplicate.hurl
          hurl --test test/confirm_duplicate.hurl

      - name: Verify object exists in Sia
        run: |
          sleep 5s
          # Check if object exists via renterd API
          curl -f "http://localhost:9980/worker/object/$HURL_publisher/$HURL_video_id.mp4?bucket=yral-videos" \
            -H "Authorization: Basic $(echo -n :test_password_123 | base64)" \
            --head

      - name: Run move2nsfw tests
        run: |
          hurl --test test/move.hurl
          hurl --test test/confirm_move.hurl

      - name: Verify object moved to NSFW bucket
        run: |
          sleep 5s
          # Check if object exists in NSFW bucket
          curl -f "http://localhost:9980/worker/object/$HURL_publisher/$HURL_video_id.mp4?bucket=yral-nsfw-videos" \
            -H "Authorization: Basic $(echo -n :test_password_123 | base64)" \
            --head
          
          # Verify it's no longer in SFW bucket (should return 404)
          if curl -f "http://localhost:9980/worker/object/$HURL_publisher/$HURL_video_id.mp4?bucket=yral-videos" \
            -H "Authorization: Basic $(echo -n :test_password_123 | base64)" \
            --head 2>/dev/null; then
            echo "ERROR: Object still exists in SFW bucket after move"
            exit 1
          fi

      - name: Clean up test objects
        run: |
          # Clean up NSFW bucket
          curl -X DELETE "http://localhost:9980/worker/object/$HURL_publisher/$HURL_video_id.mp4?bucket=yral-nsfw-videos" \
            -H "Authorization: Basic $(echo -n :test_password_123 | base64)" || true
